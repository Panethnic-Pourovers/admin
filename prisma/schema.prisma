generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Book {
  id              String         @id @default(cuid())
  barcodeId       String         @unique
  title           String
  author          String
  lastCheckedOut  DateTime
  locationId      String
  checkedOut      Boolean        @default(false)
  libraryMemberId String?
  dateCreated     DateTime       @default(now())
  member          LibraryMember? @relation("BookToLibraryMember", fields: [libraryMemberId], references: [id])
  location        Location       @relation(fields: [locationId], references: [id])
  Checkout        Checkout[]
  genres          Genre[]        @relation("BookToGenre")
  regions         Region[]       @relation("BookToRegion")

  @@index([locationId], map: "Book_locationId_fkey")
  @@index([libraryMemberId], map: "Book_libraryMemberId_fkey")
}

model Genre {
  id   String @id @default(cuid())
  name String @unique
  Book Book[] @relation("BookToGenre")
}

model Region {
  id   String @id @default(cuid())
  name String @unique
  Book Book[] @relation("BookToRegion")
}

model Location {
  id   String @id @default(cuid())
  name String
  Book Book[]
}

model LibraryMember {
  id         String     @id @default(cuid())
  firstName  String
  lastName   String
  email      String
  phone      String?
  history    String
  checkedOut Book[]     @relation("BookToLibraryMember")
  Checkout   Checkout[]
}

model Checkout {
  id           String        @id @default(cuid())
  memberId     String
  bookId       String
  checkoutDate DateTime
  dueDate      DateTime
  checkinDate  DateTime?
  book         Book          @relation(fields: [bookId], references: [id])
  member       LibraryMember @relation(fields: [memberId], references: [id])

  @@unique([memberId, bookId, checkinDate])
  @@index([bookId], map: "Checkout_bookId_fkey")
}
